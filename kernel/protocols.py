"""
Protocol-based interfaces for pyOS.
"""

from typing import Protocol, List, Any, Optional, Union, Dict, Tuple
from kernel.models import FileMetadata, UserData


class FilesystemProtocol(Protocol):
    """Protocol for filesystem operations."""

    def abs_path(self, path: str) -> str: ...

    def rel_path(self, path: str, base: str) -> str: ...

    def irel_path(self, path: str) -> str: ...

    def iabs_path(self, path: str) -> str: ...

    def dir_name(self, path: str) -> str: ...

    def base_name(self, path: str) -> str: ...

    def split(self, path: str) -> Tuple[str, str]: ...

    def join_path(self, *args: str) -> str: ...

    def exists(self, path: str) -> bool: ...

    def is_file(self, path: str) -> bool: ...

    def is_dir(self, path: str) -> bool: ...

    def copy(self, src: str, dst: str) -> None: ...

    def remove(self, path: str) -> None: ...

    def remove_dir(self, path: str) -> None: ...

    def get_size(self, path: str) -> int: ...

    def list_dir(self, path: str) -> List[str]: ...

    def list_glob(self, expression: str) -> List[str]: ...

    def list_all(self, path: str = "/") -> List[str]: ...

    def make_dir(self, path: str) -> None: ...

    def open_file_context(self, path: str, mode: str) -> Any: ...

    def open_file(self, path: str, mode: str) -> Any: ...

    def open_program(self, path: str) -> Any: ...


class MetadataProtocol(Protocol):
    """Protocol for metadata operations."""

    def get_meta_data(self, path: str) -> Optional[FileMetadata]: ...

    def get_all_meta_data(
        self, path: str = "/"
    ) -> Optional[List[FileMetadata]]: ...

    def add_path(self, path: str, owner: str, permission: str) -> None: ...

    def copy_path(self, src: str, dst: str) -> None: ...

    def move_path(self, src: str, dst: str) -> None: ...

    def delete_path(self, path: str) -> None: ...

    def get_permission_string(self, path: str) -> str: ...

    def get_permission_number(self, path: str) -> str: ...

    def set_permission_string(self, path: str, value: str) -> None: ...

    def set_permission_number(self, path: str, value: str) -> None: ...

    def set_permission(self, path: str, value: Union[str, int]) -> None: ...

    def set_time(
        self,
        path: str,
        value: Optional[
            Union[Dict[str, Any], str, Tuple[Any, ...], List[Any]]
        ] = None,
    ) -> None: ...

    def set_time_list(
        self, path: str, value: Union[Tuple[Any, ...], List[Any]]
    ) -> None: ...

    def set_time_dict(
        self, path: str, value: Optional[Dict[str, Any]] = None
    ) -> None: ...

    def set_time_string(
        self, path: str, value: Optional[str] = None
    ) -> None: ...

    def get_time(self, path: str) -> Tuple[Any, ...]: ...

    def get_owner(self, path: str) -> str: ...

    def set_owner(self, path: str, owner: str) -> None: ...


class UserProtocol(Protocol):
    """Protocol for user operations."""

    def get_user_data(self, user: str) -> Optional[UserData]: ...

    def get_all_user_data(self) -> Optional[List[UserData]]: ...

    def add_user(
        self,
        user: str,
        group: str,
        info: str,
        homedir: str,
        shell: str,
        password: str,
    ) -> None: ...

    def delete_user(self, user: str) -> None: ...

    def change_user(self, user: str, value: Any) -> None: ...

    def get_group(self, user: str) -> str: ...

    def set_group(self, user: str, value: str) -> None: ...

    def get_info(self, user: str) -> str: ...

    def set_info(self, user: str, value: str) -> None: ...

    def get_homedir(self, user: str) -> str: ...

    def set_homedir(self, user: str, value: str) -> None: ...

    def get_shell(self, user: str) -> str: ...

    def set_shell(self, user: str, value: str) -> None: ...

    def get_password(self, user: str) -> str: ...

    def set_password(self, user: str, value: str) -> None: ...

    def correct_password(self, user: str, password: str) -> bool: ...


class SystemProtocol(Protocol):
    """Protocol for system operations."""

    @property
    def filesystem(self) -> FilesystemProtocol: ...

    @property
    def metadata(self) -> MetadataProtocol: ...

    @property
    def userdata(self) -> UserProtocol: ...

    @property
    def state(self) -> Any:  # Should be SystemState enum
        ...

    def new_shell(self, *args: Any, **kwargs: Any) -> Any: ...

    def get_pid(self, item: Any) -> Any: ...

    def get_process(self, pid: Any) -> Any: ...

    def new_pid(self, item: Any) -> int: ...

    def kill(self, shell: Any) -> None: ...


class ShellProtocol(Protocol):
    """Protocol for shell operations."""

    @property
    def path(self) -> str: ...

    @path.setter
    def path(self, value: str) -> None: ...

    @property
    def old_path(self) -> str: ...

    @property
    def pid(self) -> int: ...

    @property
    def syscall(self) -> Any: ...

    def sabs_path(self, path: str) -> str: ...

    def srel_path(self, path: str, base: Optional[str] = None) -> str: ...

    def get_var(self, name: str) -> str: ...

    def set_var(self, name: str, value: str) -> None: ...
